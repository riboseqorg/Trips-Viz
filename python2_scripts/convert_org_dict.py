from sqlitedict import SqliteDict
import sqlite3
import sys


sqlite_db = SqliteDict(sys.argv[1])


connection = sqlite3.connect("{}".format((sys.argv[1]).replace(".sqlite",".v2.sqlite")))
cursor = connection.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS transcripts (transcript VARCHAR(50), gene VARCHAR(50), length INT(6), cds_start INT(6), cds_stop INT(6), sequence VARCHAR(50000), strand CHAR(1), stop_list VARCHAR(10000), start_list VARCHAR(10000), exon_junctions VARCHAR(1000), tran_type VARCHAR(20), principal INT(1));")
connection.commit()


"""
{'cds_start': 300, 
'stop_list': [2, 19, 24, 39, 85, 117, 120, 147, 154, 167, 180, 196, 211, 219, 222, 249, 265, 306, 309, 359, 375, 389, 393, 405, 414, 423, 447, 533, 545, 558, 617, 636, 641, 704, 759, 762, 774, 783, 857, 861, 870, 882, 905, 923, 933, 974, 1008, 1017, 1022, 1031, 1079, 1083, 1118, 1163, 1257, 1272, 1302, 1353, 1359, 1398, 1404, 1413, 1416, 1425, 1438, 1449, 1456, 1481, 1493, 1497, 1505, 1539, 1549, 1592, 1601, 1604, 1607, 1622, 1629, 1632, 1636, 1646, 1664, 1679, 1700, 1718], 
'gene': 'YAL032C', 
'seq': 'CTAAAATCAGAAGCAAATTGAGATAACTCCGCACCTTATAAAAACAACTCTTTATGTCCCTGGAAAAAAAAAAGAATACATATCTAATACTATTCATATCCTTCATTGTTCTTGTCTGATGATTCAAAAGTACTCATACTATTTTTTAATATTTAATCTTTTACCTTAACGTATTATTGTAATTCTTCACGAATTTGATTTTTCCCCAGCTAAAAAGTTGATGAAAGAAGTTCAAATTATGGGGTTATTGACACATGGCAGCTCTGAGCCGAGAGGACGTATCAGCAACCTCAACCAAATATGTTTAGTAACAGACTACCACCTCCAAAACATTCTCAAGGACGAGTTTCGACGGCTTTGAGCTCAGATCGCGTTGAGCCGGCAATATTGACTGACCAAATCGCTAAAAACGTTAAGCTCGATGATTTTATTCCAAAGAGACAGTCTAATTTCGAACTATCGGTTCCTTTGCCAACGAAAGCAGAAATCCAAGAATGTACAGCAAGAACCAAGTCATACATTCAGCGGCTTGTGAATGCGAAACTAGCCAACTCAAATAACAGGGCATCATCAAGGTACGTCACCGAAACACATCAGGCACCCGCGAATCTATTATTGAACAACAGCCACCATATTGAGGTAGTGTCCAAGCAAATGGATCCATTGTTGCCAAGGTTCGTTGGGAAGAAGGCGAGAAAGGTTGTAGCACCCACAGAAAACGACGAAGTCGTGCCTGTTCTCCATATGGATGGCAGCAATGATAGGGGAGAAGCTGATCCAAATGAGTGGAAGATACCTGCAGCTGTGTCAAACTGGAAAAATCCAAATGGTTATACCGTGGCCTTGGAAAGACGTGTAGGTAAAGCTCTTGACAACGAAAATAATACCATCAACGATGGGTTTATGAAGCTCTCCGAAGCGTTAGAAAACGCTGACAAGAAGGCAAGACAAGAGATCAGGTCCAAAATGGAATTGAAGCGGCTTGCTATGGAACAGGAAATGCTTGCTAAAGAATCTAAATTGAAAGAATTGAGCCAACGAGCCAGATACCACAACGGGACTCCGCAGACGGGAGCAATAGTTAAGCCCAAAAAGCAAACGAGCACAGTGGCCAGACTAAAAGAGCTGGCGTACTCTCAAGGAAGAGACGTATCCGAAAAGATAATTCTGGGCGCAGCAAAGCGTTCAGAACAACCGGATCTGCAGTACGATTCAAGATTTTTCACAAGAGGGGCAAATGCCTCCGCCAAAAGGCATGAAGACCAGGTTTATGACAACCCACTGTTCGTCCAACAAGATATTGAAAGCATATACAAGACCAACTACGAAAAGCTGGACGAAGCGGTCAATGTTAAGAGTGAAGGTGCCAGTGGTTCTCACGGCCCCATTCAGTTTACTAAAGCTGAATCCGATGATAAATCGGATAACTATGGCGCCTAGGCCCAGGATGAGCACTAGGAAAACAAAGCATTCTTGTGCTTGAGTTGTATTATAGATAAAAAAATAAAACTACTGCATATACGTGTACATCTATATATTAATATATTCTAATCGTCCTCGTTTTCGTTTTCGTTTTCCCTTCCAATTTTCTTGAAATCATTGATAATAAAGTCATTATCGCTGAGGTGTGATGATTGACTACACTTGATTATGTTCAGAATTTTAGAATTCCTTCTCATAGCAAACTGCTCTATTTTCTTGATGGTCCCACTTACCTTGACGGGGTTCACGATCAGTCCA', 'exon_junctions': [], 'tran_type': 'coding', 'length': 1740, 'cds_stop': 1442, 'start_list': [54, 119, 221, 239, 255, 301, 422, 495, 536, 655, 745, 749, 758, 782, 827, 896, 904, 967, 988, 1000, 1238, 1256, 1271, 1349, 1412, 1430, 1448, 1631, 1651, 1702], 'strand': '-'}
"""





for key in sqlite_db:
        if key == "orfs" or key == "genes":
                continue
	#print key
	transcript = key
	gene = key
	length = 0
	cds_start = "NULL"
	cds_stop = "NULL"
	seq = ""
	strand = "+"
	tran_type = "noncoding"
	start_list = ""
	stop_list = ""
	exon_junctions = ""
	if "gene" in sqlite_db[key]:
		gene = sqlite_db[key]["gene"]
	if "length" in sqlite_db[key]:
		length = sqlite_db[key]["length"]
	if "cds_start" in sqlite_db[key]:
		cds_start = sqlite_db[key]["cds_start"]
	if "cds_stop" in sqlite_db[key]:
		cds_stop = sqlite_db[key]["cds_stop"]
	if "seq" in sqlite_db[key]:
		seq = sqlite_db[key]["seq"]
	if "strand" in sqlite_db[key]:
		strand = sqlite_db[key]["strand"]
	if "tran_type" in sqlite_db[key]:
		tran_type = sqlite_db[key]["tran_type"]
	if "start_list" in sqlite_db[key]:
		start_list = str(sqlite_db[key]["start_list"]).replace(" ","").strip("[]")
	if "stop_list" in sqlite_db[key]:
		stop_list = str(sqlite_db[key]["stop_list"]).replace(" ","").strip("[]")
	if "exon_junctions" in sqlite_db[key]:
		exon_junctions = str(sqlite_db[key]["exon_junctions"]).replace(" ","").strip("[]")
	cursor.execute("INSERT INTO transcripts VALUES('{}','{}',{},{},{},'{}','{}','{}','{}','{}','{}',0);".format(transcript, gene, length, cds_start, cds_stop, seq, strand,stop_list, start_list, exon_junctions, tran_type))
	

connection.commit()
connection.close()


